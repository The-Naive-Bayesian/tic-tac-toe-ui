{"version":3,"sources":["Square.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","_ref","icon","onClick","react","className","r","cx","cy","fill","Board","boardState","clickHandleGenerator","valueMap","0","1","2","3","map","row","y","key","value","x","src_Square","concat","squareMapGenerator","initialState","potentialNextState","selectedSquare","loading","complete","winner","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveMove","state","newState","_fillWithNumber","setState","getOpponentMove","then","finished","fetch","method","mode","headers","Content-Type","body","JSON","stringify","res","json","nextState","newGame","objectSpread","number","_canFill","_replaceSquare","board","replaceWith","i","newRow","square","index","push","_this$state","react_default","a","createElement","src_Board_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80561887.chunk.js","sourcesContent":["import * as React from 'react';\n\nconst Square = ({icon, onClick}) => {\n    return (\n        <div className={\"square\"} onClick={onClick}>\n            {\n                icon\n                ? (\n                    <svg>\n                        <circle r={'45%'} cx={'50%'} cy={'50%'} fill={icon.fill} />\n                    </svg>\n                )\n                : null\n            }\n        </div>\n    );\n};\n\nexport default Square;","import * as React from 'react';\nimport './Board.css';\nimport Square from \"./Square\";\n\nconst Board = ({boardState, clickHandleGenerator}) => {\n    const valueMap = {\n        0: null,\n        1: {fill: 'black'},\n        2: {fill: 'red'},\n        3: {fill: 'grey'},\n    };\n\n    const squareMapGenerator = (y) => (value, x) => (\n        <Square\n            icon={valueMap[value]}\n            onClick={clickHandleGenerator(x, y)}\n            key={`(${x},${y})`}\n        />\n    );\n\n    const mapRows = (row, y) => (\n        <div className={'row'} key={y}>\n            {row.map(squareMapGenerator(y))}\n        </div>\n    );\n\n    return (\n        <section className={\"board\"}>\n            {boardState.map(mapRows)}\n        </section>\n    )\n};\n\nexport default Board;","import React, { Component } from 'react';\nimport './App.css';\nimport Board from \"./Board\";\n\nconst initialState = {\n    boardState: [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n    ],\n    potentialNextState: [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n    ],\n    selectedSquare: null,\n    loading: false,\n    complete: false,\n    winner: null\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {...initialState};\n    }\n\n    saveMove = () => {\n        const {selectedSquare} = this.state;\n\n        if (!selectedSquare) {\n            return false;\n        }\n        const newState = this._fillWithNumber(selectedSquare.x, selectedSquare.y, 1);\n        this.setState({\n            loading: true,\n            selectedSquare: null\n        });\n        this.getOpponentMove(newState).then(({boardState, finished, winner}) => this.setState({\n            boardState,\n            potentialNextState: boardState,\n            loading: false,\n            complete: finished,\n            winner\n        }));\n    };\n\n    getOpponentMove = (boardState) => {\n        return fetch('https://wt-c9e7248ce110a8011618a06ccf73d34f-0.sandbox.auth0-extend.com/tic-tac-toe', {\n            method: 'POST',\n            mode: \"cors\",\n            headers: {\"Content-Type\": \"application/json; charset=utf-8\"},\n            body: JSON.stringify({\n                boardState\n            })\n        }).then(res => {\n            return res.json();\n        });\n    };\n\n    clickHandleGenerator = (x, y) => {\n        return () => {\n            const nextState = this._fillWithNumber(x, y, 3);\n            if (nextState) {\n                this.setState({\n                    potentialNextState: nextState,\n                    selectedSquare: {x, y}\n                })\n            }\n        };\n    };\n\n    newGame = () => {\n        this.setState({...initialState})\n    };\n\n    _fillWithNumber = (x, y, number) => {\n        // Fill w black circle\n        const {boardState} = this.state;\n        const canFill = this._canFill(x, y);\n        if (!canFill) {\n            return null;\n        }\n        return this._replaceSquare(boardState, x, y, number);\n    };\n\n    _replaceSquare = (board, x, y, replaceWith) => {\n        const newState = [];\n\n        for (let i=0; i<3; i++) {\n            if (i === y) {\n                const newRow = board[y].map((square, index) => (index === x) ? replaceWith : square);\n                newState.push(newRow);\n            } else {\n                newState.push(board[i])\n            }\n        }\n        return newState;\n    };\n\n    _canFill = (x, y) => {\n        // Currently: fill if not populated\n        const {boardState} = this.state;\n        return !boardState[y][x];\n    };\n\n    render() {\n        const {potentialNextState, loading, complete, winner} = this.state;\n        const winnerMap = {\n            0: 'It was a tie!',\n            1: 'You win!',\n            2: 'You lost!',\n        };\n        return (\n            <div className=\"App\">\n                <header>Tic Tac Toe</header>\n                {loading ? <h2>Thinking...</h2> : null}\n                {\n                    complete\n                        ? <h2>Game Over: {winnerMap[winner]}</h2>\n                        : null\n                }\n                <Board boardState={potentialNextState} clickHandleGenerator={this.clickHandleGenerator}/>\n\n                {\n                    complete\n                    ? null\n                    : <button className={'save'} onClick={this.saveMove}>Save Move</button>\n                }\n                <button className={'save'} onClick={this.newGame}>New Game</button>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}